// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
   previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id          String         @id @default(uuid())
  email       String         @unique
  isVerified  Boolean        @default(false)
  role        Role           @default(USER)
  phoneNumber String         @unique
  name        String
  gender      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
  auth        Auth?
  token       AuthOtpToken[]
  hotel       Hotel[]
  upload      Upload[]
}

model Auth {
  id       String @id @default(uuid())
  password String
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique
}

enum AuthOtpTokenType {
  TOKEN
  OTP
}

model AuthOtpToken {
  id      String           @id @default(uuid())
  subject String
  type    AuthOtpTokenType @default(OTP)
  code    String           @unique

  expiry  DateTime
  email   String
  user    User?    @relation(fields: [userId], references: [id])
  userId  String?
  hotel   Hotel?   @relation(fields: [hotelId], references: [id])
  hotelId String?

  @@index([code])
  @@index([email])
}

model Hotel {
  id           String         @id @default(uuid())
  name         String
  email        String
  contactPhone String
  description  String
  address      String
  amenities    String[]
  features     String[]
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  attachment   Attachments    @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
  attachmentId String
  account      Account?
  rule         Upload?        @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  ruleId       String?
  authOtpToken AuthOtpToken[]
  rooms        Room[]

  fullText    String @default("")

  @@index([name])
}

enum RoomCategory {
  DELUXE
  STANDARD
  SINGLE
  SUITE
}

model Room {
  id          String       @id @default(uuid())
  category    RoomCategory @default(SINGLE)
  description String
  price       Float
  number      String
  hotel       Hotel       @relation(fields: [hotelId], references: [id])
  hotelId     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  attachment  Attachments  @relation(fields: [attachmentId],references: [id], onDelete:Cascade)
  attachmentId String 
  fullText    String @default("")
}

model Account {
  id           String @id @default(uuid())
  bankName     String
  accountName  String
  accoutNumber String
  hotel        Hotel  @relation(fields: [hotelId], references: [id])
  hotelId      String @unique
}

model Upload {
  id          String        @id @default(uuid())
  name        String
  type        String
  size        Int
  data        Bytes
  order       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  attachments Attachments[]
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  hotel       Hotel[]
}

model Attachments {
  id      String   @id @default(uuid())
  uploads Upload[]
  hotel   Hotel[]
  rooms   Room[]
}
